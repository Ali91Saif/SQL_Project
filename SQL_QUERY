-----------------------Set A Problems

--1. Who are the top 3 senior most employee based on the job title?

select * from employee
order by levels desc
limit 3;

--2. Which 5 Countries have the most Invoices?

select COUNT(*) as C , billing_country from invoice
group by billing_country
order by C desc
limit 5;

--3.What are top 5 values of total invoices

select billing_country,total from invoice
group by billing_country,total
order by total desc
limit 5;


/*	4.Which city has the best customers? Company would like to throw a promotional 
	Music Festival in the city it made the most money.write a query to return
	one city that has highest sum of invoices total.return both the city name
	and sum of all invoice total */

select sum(total) as Total_Invoice ,
billing_city 
from invoice
group by billing_city
order by total_invoice desc
limit 1;



/*  5.who is the best customer?The customer who has spent the most
	money wiil be declared the best customer. write a query that return
	the person who has spent the most money */

select 
	customer.customer_id,
	customer.first_name,
	customer.last_name,
	customer.city,
	customer.country,
	SUM(invoice.total) as Total_spending from customer
JOIN invoice ON invoice.customer_id = customer.customer_id
group by customer.customer_id
order by Total_spending desc
limit 1;



-------------------------------Set B questions:-

/*	1. write a query to return the email.first name,last name 
	and gener of all rock music listeners.
	return your list ordered alphabetically by email starting with A*/

-- Method 1

select distinct
email,
first_name,
last_name
from customer
JOIN invoice ON invoice.customer_id = customer.customer_id
JOIN invoice_line ON invoice_line.invoice_id = invoice.invoice_id
JOIN track ON track.track_id = invoice_line.track_id
JOIN genre ON genre.genre_id = track.genre_id
WHERE genre.name = 'Rock'
order by email;

-- Alternate Method

SELECT DISTINCT email,first_name, last_name
FROM customer
JOIN invoice ON customer.customer_id = invoice.customer_id
JOIN invoiceline ON invoice.invoice_id = invoiceline.invoice_id
WHERE track_id IN(
	SELECT track_id FROM track
	JOIN genre ON track.genre_id = genre.genre_id
	WHERE genre.name LIKE 'Rock'
	)
ORDER BY email;

-- Alternate Method

SELECT DISTINCT email AS Email,first_name AS FirstName, last_name AS LastName, genre.name AS Name
FROM customer
JOIN invoice ON invoice.customer_id = customer.customer_id
JOIN invoice_line ON invoice_line.invoice_id = invoice.invoice_id
JOIN track ON track.track_id = invoice_line.track_id
JOIN genre ON genre.genre_id = track.genre_id
WHERE genre.name LIKE 'Rock'
ORDER BY email;



/*	2. Lets invite the artists who have written the most rock music in our dataset. 
	write a query that returns the artist name and total track count of
	the top 10 rock bands */

-- Alternate Method

select 
artist.name,
artist.artist_id, 
COUNT(artist.artist_id) AS Number_of_Songs  
from artist
JOIN album ON album.artist_id = artist.artist_id
JOIN track ON track.album_id = album.album_id
JOIN genre ON genre.genre_id = track.genre_id
WHERE genre.name = 'Rock'
group by artist.name,artist.artist_id
order by Number_of_Songs desc
limit 10;

-- Alternate Method

SELECT 
artist.artist_id, 
artist.name,
COUNT(artist.artist_id) AS number_of_songs
FROM track
JOIN album ON album.album_id = track.album_id
JOIN artist ON artist.artist_id = album.artist_id
JOIN genre ON genre.genre_id = track.genre_id
WHERE genre.name LIKE 'Rock'
GROUP BY artist.artist_id
ORDER BY number_of_songs DESC
LIMIT 10;

/*	3. return all the track names that have a song length longer than the average song length.
	Return the name and milliseconds for each track. order by song length with the longest
	song listed first */


SELECT
name AS Songs_Name,
milliseconds AS More_Than_Avg 
FROM track
WHERE milliseconds > (SELECT AVG(milliseconds) FROM track)
ORDER BY milliseconds DESC


-----------------------Set C Problems

/*	1. find how much amount spent by each customer on artists? write a query to return customer
	name, artist name and total spent */
	
WITH best_selling_artist AS (
	SELECT artist.artist_id AS artist_id, artist.name AS artist_name, SUM(invoice_line.unit_price*invoice_line.quantity) AS total_sales
	FROM invoice_line
	JOIN track ON track.track_id = invoice_line.track_id
	JOIN album ON album.album_id = track.album_id
	JOIN artist ON artist.artist_id = album.artist_id
	GROUP BY 1
	ORDER BY 3 DESC
	LIMIT 1
)
SELECT c.customer_id, c.first_name, c.last_name, bsa.artist_name, SUM(il.unit_price*il.quantity) AS amount_spent
FROM invoice i
JOIN customer c ON c.customer_id = i.customer_id
JOIN invoice_line il ON il.invoice_id = i.invoice_id
JOIN track t ON t.track_id = il.track_id
JOIN album alb ON alb.album_id = t.album_id
JOIN best_selling_artist bsa ON bsa.artist_id = alb.artist_id
GROUP BY 1,2,3,4
ORDER BY 5 DESC;

		
/*	2. we want to find out most popular music genre for each country.we determine the most popular
	genre as the genre with the higest amount of purchases. write a query that returns
	each country along with the top genre. For countries where maximum number odf
	purchases is shared return all genres.  */

--Method 1: Using CTE 

WITH popular_genre AS 
(
    SELECT COUNT(invoice_line.quantity) AS purchases, customer.country, genre.name, genre.genre_id, 
	ROW_NUMBER() OVER(PARTITION BY customer.country ORDER BY COUNT(invoice_line.quantity) DESC) AS RowNo 
    FROM invoice_line 
	JOIN invoice ON invoice.invoice_id = invoice_line.invoice_id
	JOIN customer ON customer.customer_id = invoice.customer_id
	JOIN track ON track.track_id = invoice_line.track_id
	JOIN genre ON genre.genre_id = track.genre_id
	GROUP BY 2,3,4
	ORDER BY 2 ASC, 1 DESC
)
SELECT * FROM popular_genre WHERE RowNo <= 1


-- Method 2: : Using Recursive 

WITH RECURSIVE
	sales_per_country AS(
		SELECT COUNT(*) AS purchases_per_genre, customer.country, genre.name, genre.genre_id
		FROM invoice_line
		JOIN invoice ON invoice.invoice_id = invoice_line.invoice_id
		JOIN customer ON customer.customer_id = invoice.customer_id
		JOIN track ON track.track_id = invoice_line.track_id
		JOIN genre ON genre.genre_id = track.genre_id
		GROUP BY 2,3,4
		ORDER BY 2
	),
	max_genre_per_country AS (SELECT MAX(purchases_per_genre) AS max_genre_number, country
		FROM sales_per_country
		GROUP BY 2
		ORDER BY 2)

SELECT sales_per_country.* 
FROM sales_per_country
JOIN max_genre_per_country ON sales_per_country.country = max_genre_per_country.country
WHERE sales_per_country.purchases_per_genre = max_genre_per_country.max_genre_number;


/*	3. write a query that determines the customer that has spent the most on  
	music for each country.Write a query that returns the country along with the 
	top customer and how they spent.For the country where the top amount spent 
	is shared, provide all cusomers who spent this amount.  */

--  Method 1: using CTE 

WITH Customter_with_country AS (
		SELECT customer.customer_id,first_name,last_name,billing_country,SUM(total) AS total_spending,
	    ROW_NUMBER() OVER(PARTITION BY billing_country ORDER BY SUM(total) DESC) AS RowNo 
		FROM invoice
		JOIN customer ON customer.customer_id = invoice.customer_id
		GROUP BY 1,2,3,4
		ORDER BY 4 ASC,5 DESC)
SELECT * FROM Customter_with_country WHERE RowNo <= 1


-- Method 2: Using Recursive 

WITH RECURSIVE 
	customter_with_country AS (
		SELECT customer.customer_id,first_name,last_name,billing_country,SUM(total) AS total_spending
		FROM invoice
		JOIN customer ON customer.customer_id = invoice.customer_id
		GROUP BY 1,2,3,4
		ORDER BY 2,3 DESC),

	country_max_spending AS(
		SELECT billing_country,MAX(total_spending) AS max_spending
		FROM customter_with_country
		GROUP BY billing_country)

SELECT cc.billing_country, cc.total_spending, cc.first_name, cc.last_name, cc.customer_id
FROM customter_with_country cc
JOIN country_max_spending ms
ON cc.billing_country = ms.billing_country
WHERE cc.total_spending = ms.max_spending
ORDER BY 1;




